import os
import json
from collections import defaultdict

def merge_exploit_datasets(metasploit_data, exploitdb_data, output_path):
    """
    Merge Metasploit and ExploitDB datasets. If output file already exists, load and return it.

    Args:
        metasploit_data (list): List of Metasploit entries (dicts).
        exploitdb_data (list): List of ExploitDB entries (either dicts or CSV lines).
        output_path (str): Path to save or load merged dataset.

    Returns:
        list: Merged dataset list of dicts.
    """

    if os.path.exists(output_path):
        print(f"[✓] Loading merged dataset from cache: {output_path}")
        with open(output_path, "r") as f:
            return json.load(f)

    print("[*] Creating merged exploit dataset...")

    merged_exploits = defaultdict(lambda: {"metasploit": None, "exploitdb": None})

    # ExploitDB
    for row in exploitdb_data:
        if isinstance(row, dict):
            path = row.get("exploit_path")
            cve = row.get("cve", "").strip().lower()
        elif isinstance(row, str):
            if not row.strip():
                continue
            try:
                path, cve = row.strip().split(",", 1)
                cve = cve.strip().lower()
            except ValueError:
                continue
        else:
            continue

        key = cve if cve != "no cve" else f"no_cve:{path}"
        merged_exploits[key]["exploitdb"] = {
            "exploit_path": path,
            "cve": None if cve == "no cve" else cve.upper(),
            "source": "exploitdb"
        }

    # Metasploit
    for item in metasploit_data:
        cve = item.get("cve")
        key = cve if cve else f"no_cve:{item['exploit_path']}"
        merged_exploits[key]["metasploit"] = {
            "exploit_path": item["exploit_path"],
            "cve": cve,
            "default_payload": item.get("default_payload"),
            "other_payloads": item.get("other_payloads", []),
            "required_options": item.get("required_options", {}),
            "source": "metasploit"
        }

    merged_list = []
    for key, value in merged_exploits.items():
        entry = {"cve": key}
        entry.update(value)
        merged_list.append(entry)

    with open(output_path, "w") as f:
        json.dump(merged_list, f, indent=2)

    print(f"[✓] Merged dataset saved to: {output_path}")
    return merged_list
