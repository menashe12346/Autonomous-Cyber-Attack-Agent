import pandas as pd
import os

def create_cve_exploitdb_dataset(EXPLOITDB_FILES_EXPLOITS_PATH, output_csv_path: str):
    """
    Reads an ExploitDB CSV file, extracts CVE identifiers from the 'codes' column,
    and writes a new CSV file with exploit paths and CVEs only.

    Args:
        EXPLOITDB_FILES_EXPLOITS_PATH (str): Path to the input CSV file.
        output_csv_path (str): Path to the output CSV file.
    """
    # Check if output file already exists
    if os.path.exists(output_csv_path):
        print(f"✅ File exploitdb_cve already exists, skipping...")
        return

    # Load the input CSV
    try:
        df = pd.read_csv(EXPLOITDB_FILES_EXPLOITS_PATH, encoding="utf-8", on_bad_lines="skip", dtype=str)
    except Exception as e:
        print(f"❌ Error loading input file: {e}")
        return

    # Extract relevant records
    output_data = []

    for _, row in df.iterrows():
        exploit_path = row.get("file", "").strip()
        exploit_id = row.get("id", "").strip()
        cve = row.get("codes", "")

        if pd.isna(cve) or not cve.strip():
            cve = "no cve"
        else:
            # Keep only the first valid CVE if multiple are separated by semicolons
            cve = [code.strip() for code in cve.split(";") if "CVE" in code]
            cve = cve[0] if cve else "no cve"

        output_data.append({
            "exploit_path": exploit_path,
            "cve": cve
        })

    # Save the output
    output_df = pd.DataFrame(output_data)
    output_df.to_csv(output_csv_path, index=False, encoding="utf-8")
    print(f"✅ File exploitdb_cve created successfully: {output_csv_path}")
